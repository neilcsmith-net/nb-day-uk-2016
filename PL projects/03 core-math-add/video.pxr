@ /video root:video {
  #%pxr.format 2
  .renderer OpenGL
  @ ./output1 video:output {
    #%graph.x 992
    #%graph.y 135
    .always-on-top true
  }
  @ ./custom1 video:custom {
    #%graph.x 529
    #%graph.y 358
    .code "

    
    @P(1) @Port(false) PImage sprite;
    @P(2) @Type.Integer(min=0, max=64) int count;
    
    @Inject Property animCount;
    
    @Override
    public void draw() \{
        
        int c = i(animCount);
        if (c != count && !animCount.isAnimating()) \{
            animCount.to(count).in(0.25);
        \}
        
        if (sprite == null) return;
        
        int wd = width / 8;
        int hd = height / 8;
        int bd = min(wd / 16, 2);
        
        for (int i=0; i<c; i++) \{
            image(sprite,
                    (i % 8) * wd + bd,
                    (i / 8) * hd + bd,
                    wd - (2 * bd),
                    hd - (2 * bd)
                    );
        \}
        
    \}
"
    .sprite [file "resources/netbeans.png"]
    .count 5
  }
  @ ./add1 core:math:add {
    #%graph.x 342
    #%graph.y 365
  }
  @ ./timer1 core:timing:timer {
    #%graph.x 78
    #%graph.y 254
  }
  @ ./iterator1 core:array:iterator {
    #%graph.x 151
    #%graph.y 365
    .values [array 1 2 3 4 5]
  }
  @ ./rippling core:container {
    #%graph.x 783
    #%graph.y 102
    @ ./glsl video:gl:filter {
      #%graph.x 532
      #%graph.y 118
      .fragment "//https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/NoiseWarpPass.cpp

varying vec4 vertTexCoord;
uniform sampler2D texture;
uniform float u1, u2, u3;
            float frequency = 2.0;
            float amplitude = u2 * 0.2;
            float time = u1 * 86400.0 ;
            float speed = 0.1;

            //
            // Description : Array and textureless GLSL 2D/3D/4D simplex
            // noise functions.
            // Author : Ian McEwan, Ashima Arts.
            // Maintainer : ijm
            // Lastmod : 20110822 (ijm)
            // License : Copyright (C) 2011 Ashima Arts. All rights reserved.
            // Distributed under the MIT License. See LICENSE file.
            // https://github.com/ashima/webgl-noise
            //

            vec3 mod289(vec3 x) \{
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            \}

            vec4 mod289(vec4 x) \{
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            \}

            vec4 permute(vec4 x) \{
             return mod289(((x*34.0)+1.0)*x);
            \}

            vec4 taylorInvSqrt(vec4 r)
            \{
                return 1.79284291400159 - 0.85373472095314 * r;
            \}
                                             
            float snoise(vec3 v)
            \{
                const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
                const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
                
                // First corner
                vec3 i = floor(v + dot(v, C.yyy) );
                vec3 x0 = v - i + dot(i, C.xxx) ;
                
                // Other corners
                vec3 g = step(x0.yzx, x0.xyz);
                vec3 l = 1.0 - g;
                vec3 i1 = min( g.xyz, l.zxy );
                vec3 i2 = max( g.xyz, l.zxy );
                
                // x0 = x0 - 0.0 + 0.0 * C.xxx;
                // x1 = x0 - i1 + 1.0 * C.xxx;
                // x2 = x0 - i2 + 2.0 * C.xxx;
                // x3 = x0 - 1.0 + 3.0 * C.xxx;
                vec3 x1 = x0 - i1 + C.xxx;
                vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
                vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y
                
                // Permutations
                i = mod289(i);
                vec4 p = permute( permute( permute(
                                                   i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                                          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                                 + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
                
                // Gradients: 7x7 points over a square, mapped onto an octahedron.
                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
                float n_ = 0.142857142857; // 1.0/7.0
                vec3 ns = n_ * D.wyz - D.xzx;
                
                vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)
                
                vec4 x_ = floor(j * ns.z);
                vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)
                
                vec4 x = x_ *ns.x + ns.yyyy;
                vec4 y = y_ *ns.x + ns.yyyy;
                vec4 h = 1.0 - abs(x) - abs(y);
                
                vec4 b0 = vec4( x.xy, y.xy );
                vec4 b1 = vec4( x.zw, y.zw );
                
                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
                vec4 s0 = floor(b0)*2.0 + 1.0;
                vec4 s1 = floor(b1)*2.0 + 1.0;
                vec4 sh = -step(h, vec4(0.0));
                
                vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
                vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
                
                vec3 p0 = vec3(a0.xy,h.x);
                vec3 p1 = vec3(a0.zw,h.y);
                vec3 p2 = vec3(a1.xy,h.z);
                vec3 p3 = vec3(a1.zw,h.w);
                
                //Normalise gradients
                vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
                p0 *= norm.x;
                p1 *= norm.y;
                p2 *= norm.z;
                p3 *= norm.w;
                
                // Mix final noise value
                vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
                m = m * m;
                return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                             dot(p2,x2), dot(p3,x3) ) );
            \}
            // end of noise functions
                                         
            void main()
            \{
                vec2 texCoords = vertTexCoord.st + vec2(
                    amplitude * (snoise(vec3(frequency * vertTexCoord.s, frequency * vertTexCoord.t, speed * time))),
                    amplitude * (snoise(vec3(frequency * vertTexCoord.s + 17.0, frequency * vertTexCoord.t, speed * time)))
                );
                vec2 pos = 0.5 - vertTexCoord.st;
                vec4 color = texture2D(texture, texCoords);       
                gl_FragColor = vec4(color.rgg,1.0);
            \}"
      .u1 0.030100437360037886
      .u2 0.4
      .clear-screen false
    }
    @ ./time core:custom {
      #%graph.x 358
      #%graph.y 324
      .code "

    @Out(1) Output out;
    @P(1) @Port(false) Property time;
    @P(2) @Type.Number(min=0.1,max=10,def=0.1) Property speed;
    double lastSpeed;
    
public void setup() \{
    lastSpeed = d(speed);
\}

public void update() \{
    if (!time.isAnimating()) \{
        time.set(0).to(1).in(86400 * lastSpeed);
    \}
    if (lastSpeed != d(speed)) \{
        lastSpeed = d(speed);
        double frac = d(time);
        double in = 86400 - (86400 * frac);
        in /= lastSpeed;
        time.to(1).in(in);
    \}
    out.send(d(time));
\}
"
      .time 0.030100437360037886
      .speed 2
    }
    @ ./in video:container:input {
      #%graph.x 305
      #%graph.y 39
    }
    @ ./out video:container:output {
      #%graph.x 851
      #%graph.y 115
    }
    @ ./amplitude core:container:property {
      #%graph.x 212
      #%graph.y 123
      .type Number
      .minimum 0
      .maximum 1
      .value 0.4
    }
    @ ./speed core:container:property {
      #%graph.x 288
      #%graph.y 232
      .type Number
      .minimum 0.1
      .maximum 10
      .value 2
    }
    ~ ./time!out ./glsl!u1
    ~ ./in!out ./glsl!in
    ~ ./glsl!out ./out!in
    ~ ./amplitude!out ./glsl!u2
    ~ ./speed!out ./time!speed
  }
  @ ./start-trigger1 core:start-trigger {
    #%graph.x 77
    #%graph.y 134
  }
  @ ./capture1 video:capture {
    #%graph.x 306
    #%graph.y 111
    .device 1
  }
  @ ./composite1 video:composite {
    #%graph.x 569
    #%graph.y 116
    .mix 1.0
    .force-alpha true
  }
  ~ ./timer1!out ./iterator1!trigger
  ~ ./iterator1!out ./add1!in
  ~ ./start-trigger1!out ./capture1!play
  ~ ./add1!out ./custom1!count
  ~ ./capture1!out ./composite1!in
  ~ ./custom1!out ./composite1!src
  ~ ./composite1!out ./rippling!in
  ~ ./rippling!out ./output1!in
}
